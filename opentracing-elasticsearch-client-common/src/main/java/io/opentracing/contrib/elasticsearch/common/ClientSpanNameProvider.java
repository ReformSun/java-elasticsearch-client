/*
 * Copyright 2017-2018 The OpenTracing Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

package io.opentracing.contrib.elasticsearch.common;

import org.apache.http.HttpRequest;

import java.util.function.Function;
import java.util.regex.Pattern;

/**
 * @author Jordan J Lopez
 * Returns a string to be used as the name of the spans, based on
 * the operation preformed and the record the span is based off of.
 */
public class ClientSpanNameProvider {

  /**
   * The following patterns are derived from the Elasticsearch http API found here:
   * https://www.elastic.co/guide/en/elasticsearch/reference/5.6/docs.html
   */
  // Matches the parameters of the request
  private static final Pattern regexParameterPattern = Pattern.compile("\\?.+$");
  // Matches task IDs
  private static final Pattern regexTaskIDPattern = Pattern.compile("task_id:\\d+");
  // Matches other IDs
  private static final Pattern regexIDPattern = Pattern.compile("/\\d+((/)|($))");

  /**
   * A Function that returns the HTTP Method of the request as the name.
   */
  public static Function<HttpRequest, String> REQUEST_METHOD_NAME =
      (request) -> replaceIfNull(request.getRequestLine().getMethod(), "unknown");

  /**
   * A configurable version of REQUEST_METHOD_NAME
   *
   * @param prefix The String prefix that will be appended to the name generated by the Function.
   * @return A Function that, when given an HttpRequest, will return a String concatenation of the prefix and
   * the HTTP method of the request.
   */
  public static Function<HttpRequest, String> PREFIXED_REQUEST_METHOD_NAME(final String prefix) {
    return (request) -> replaceIfNull(prefix, "")
        + replaceIfNull(request.getRequestLine().getMethod(), "unknown");
  }

  /**
   * A Function that returns the Elasticsearch target of the request as the name.
   */
  public static Function<HttpRequest, String> REQUEST_TARGET_NAME =
      (request) -> replaceIfNull(standardizeUri(request.getRequestLine().getUri()), "unknown");

  /**
   * A configurable version of REQUEST_TARGET_NAME
   *
   * @param prefix The String prefix that will be appended to the name generated by the Function.
   * @return A Function that, when given an HttpRequest, will return a String concatenation of the prefix and
   * the Elasticsearch target of the request.
   */
  public static Function<HttpRequest, String> PREFIXED_REQUEST_TARGET_NAME(final String prefix) {
    return (request) -> replaceIfNull(prefix, "")
        + replaceIfNull(standardizeUri(request.getRequestLine().getUri()), "unknown");
  }

  /**
   * A Function that returns a concatenation of the HTTP Method of the request and the
   * Elasticsearch target of the request as the name
   */
  public static Function<HttpRequest, String> REQUEST_METHOD_TARGET_NAME =
      (request) -> replaceIfNull(request.getRequestLine().getMethod(), "unknown")
          + " " + replaceIfNull(standardizeUri(request.getRequestLine().getUri()), "unknown");

  /**
   * A configurable version of REQUEST_METHOD_TARGET_NAME
   *
   * @param prefix The String prefix that will be appended to the name generated by the Function.
   * @return A Function that, when given an HttpRequest, will return a String concatenation of the prefix, the
   * HTTP method of the request, and the Elasticsearch target of the request.
   */
  public static Function<HttpRequest, String> PREFIXED_REQUEST_METHOD_TARGET_NAME(final String prefix) {
    return (request) -> replaceIfNull(prefix, "")
        + replaceIfNull(request.getRequestLine().getMethod(), "unknown")
        + " " + replaceIfNull(standardizeUri(request.getRequestLine().getUri()), "unknown");
  }

  /**
   * Replaces String input with String replacement if input is null
   *
   * @param input The String being checked for null
   * @param replacement The replacement String if input is null
   * @return The given String input if it is not null, the given String replacement otherwise
   */
  private static String replaceIfNull(String input, String replacement) {
    return (input == null) ? replacement : input;
  }

  /**
   * Using regexes derived from the Elasticsearch 5.6 HTTP API, this method removes additional
   * parameters in the request and replaces numerical IDs with '?' to reduce granularity.
   *
   * @param uri The uri of the HttpRequest that is calling out to Elasticsearch
   * @return A standardized version of the uri that reduces granularity.
   */
  private static String standardizeUri(String uri) {
    return (uri == null) ? null : regexIDPattern.matcher(
            regexTaskIDPattern.matcher(
                    regexParameterPattern.matcher(
                            uri
                    ).replaceFirst("")
            ).replaceAll("task_id:\\?")
    ).replaceAll("/\\?$1");
  }
}
